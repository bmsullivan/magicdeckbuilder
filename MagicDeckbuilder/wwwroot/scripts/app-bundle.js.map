{"version":3,"sources":["deckbuilder-app.js","deckbuilder.js","environment.js","decks/edit.js","decks/list.js","resources/index.js"],"names":["App","message","configureRouter","config","router","map","route","name","moduleId","configure","Promise","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","debug","developmentLogging","testing","plugin","start","then","setRoot","Edit","http","deck","x","useStandardConfiguration","withBaseUrl","activate","params","fetch","id","json","cards","quantity","join","val","cardQuantityStrings","split","firstSpaceIndex","indexOf","card","substr","List","window","currentUserId","decks"],"mappings":"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","file":"app-bundle.js","sourcesContent":["export class App {\n    constructor() {\n        this.message = 'Hello World!';\n    }\n\n    configureRouter(config, router) {\n        this.router = router;\n\n        config.map([\n            { route: ['', 'decks/list'], name: 'decks/list', moduleId: 'decks/list' },\n            { route: ['decks/edit/:id'], name: 'decks/edit', moduleId: 'decks/edit' }\n        ]);\n    }\n}\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot('deckbuilder-app'));\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import { HttpClient } from 'aurelia-fetch-client';\r\nimport { inject } from 'aurelia-framework';\r\n\r\n@inject(HttpClient)\r\nexport class Edit {\r\n\r\n    deck = null;\r\n    constructor(http) {\r\n        this.http = http;\r\n\r\n        this.http.configure(x => x.useStandardConfiguration().withBaseUrl(\"/api/\"));\r\n    }\r\n\r\n    activate(params) {\r\n        return this.http.fetch(`decks/${params.id}`)\r\n            .then(x => x.json())\r\n            .then(x => {\r\n                this.deck = x;\r\n            });\r\n    }\r\n\r\n    get cardList() {\r\n        return this.deck.cards.map(x => `${x.quantity} ${x.name}`).join('\\n');\r\n    }\r\n\r\n    set cardList(val) {\r\n        let cardQuantityStrings = val.split('\\n');\r\n        this.deck.cards = cardQuantityStrings.map(x => {\r\n            let firstSpaceIndex = x.indexOf(' ');\r\n            let card = {\r\n                quantity: x.substr(0, firstSpaceIndex),\r\n                name: x.substr(firstSpaceIndex+1)\r\n            };\r\n            return card;\r\n        });\r\n    }\r\n}","import { HttpClient } from 'aurelia-fetch-client';\r\nimport { inject } from 'aurelia-framework';\r\n\r\n@inject(HttpClient)\r\nexport class List {\r\n    constructor(http) {\r\n        this.http = http;\r\n\r\n        this.http.configure(x => x.useStandardConfiguration().withBaseUrl(\"/api/\"));\r\n    }\r\n\r\n    activate() {\r\n        return this.http.fetch(`decks?userId=${window.currentUserId}`)\r\n            .then(x => x.json())\r\n            .then(x => this.decks = x);\r\n    }\r\n}","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":"../.."}